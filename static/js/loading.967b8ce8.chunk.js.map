{"version":3,"sources":["pages/animations/fade-in.tsx","pages/animations/index.ts","pages/page-wrapper.tsx","components/icons.tsx","modules/client/actions.ts","modules/model/use-predictions.ts","modules/model/index.ts","shared/config.ts","shared/endpoints.ts","modules/loader/api.ts","modules/loader/actions.ts","pages/loading/styles.ts","pages/loading/loader.tsx","pages/loading/layout.tsx","components/swipe-container/use-touch.ts","components/swipe-container/styles.ts","components/swipe-container/swipe-container.tsx","pages/prediction/styles.ts","pages/prediction/layout.tsx"],"names":["fadeIn","keyframes","Animations","FadeIn","styled","div","props","duration","PageWrapper","children","style","width","height","Icon","type","icon","BackIcon","faChevronLeft","CantDisplayIcon","faEyeSlash","CameraIcon","faCamera","changeStage","createAsyncThunk","arg","thunkAPI","setTimeout","dispatch","clientSlice","actions","stage","ms","setSnapshot","snapshot","nextStage","usePredictions","model","labels","React","prediction","setPrediction","a","predictImage","result","map","accuracy","index","label","sort","left","right","predict","catch","target","blobToImage","image","tf","fromPixelsAsync","data","preparedData","resizeNearestNeighbor","toFloat","add","expandDims","Array","isArray","promises","item","Promise","all","results","numbers","from","reduce","current","img","document","createElement","src","URL","createObjectURL","resolve","onload","config","endpoint","process","createPath","path","href","endpoints","L2","l1l2","className","registerClass","loaderApi","onDownloadProgress","onProgress","value","cancelToken","axios","get","event","loaded","total","response","loadData","entity","loaderSlice","changeStatus","progress","setProgress","Math","floor","setModel","setLabels","console","error","setError","Container","CircleContainer","Circle","CircleTitle","span","Loader","action","title","useDispatch","loader","useLoader","text","titles","Layout","normalizeNumber","num","min","max","Header","ActiveElement","Content","header","SwipeContainer","containerHeight","containerRef","setStage","shift","setShift","handleTouchStart","handleTouchEnd","topDiff","abs","bottomDiff","handleTouchMove","touch","targetTouches","pageY","useTouch","createHandler","top","ref","onTouchStart","onTouchEnd","onTouchMove","BackButton","ImagePreview","Prediction","PredictionImage","PredictionInfo","PredictionTitle","PredictionAccuracy","PredictionLine","Predictions","list","toFixed","client","Client","predictions","Model","handleBack","onClick","window","innerHeight"],"mappings":"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","file":"static/js/loading.967b8ce8.chunk.js","sourcesContent":["import styled, { keyframes } from \"styled-components\";\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\ntype FadeInProps = {\n    duration: number;\n};\n\nexport const FadeIn = styled.div<FadeInProps>`\n    animation: ${fadeIn} ${(props) => props.duration}s linear 1;\n`;\n","import { FadeIn } from \"pages/animations/fade-in\";\n\nexport const Animations = {\n    FadeIn,\n};\n","import { Animations } from \"pages/animations\";\nimport * as React from \"react\";\n\nexport const PageWrapper: React.FC = ({ children }) => {\n    return (\n        <Animations.FadeIn\n            duration={1}\n            style={{\n                width: \"100%\",\n                height: \"100%\",\n            }}\n        >\n            {children}\n        </Animations.FadeIn>\n    );\n};\n","import { IconName } from \"@fortawesome/fontawesome-common-types\";\nimport { IconDefinition } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n    faCamera,\n    faChevronLeft,\n    faEyeSlash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as React from \"react\";\n\ntype IconProps = {\n    type: IconName | IconDefinition;\n};\n\nexport const Icon: React.FC<IconProps> = ({ type }) => {\n    return <FontAwesomeIcon icon={type} />;\n};\n\nexport const BackIcon = () => <Icon type={faChevronLeft} />;\n\nexport const CantDisplayIcon = () => <Icon type={faEyeSlash} />;\n\nexport const CameraIcon = () => <Icon type={faCamera} />;\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { AppStage, clientSlice, Snapshot } from \"modules/client/slice\";\n\ntype ChangeStageArg = {\n    ms: number;\n    stage: AppStage;\n};\n\nexport const changeStage = createAsyncThunk<void, ChangeStageArg>(\n    \"client/change-stage\",\n    (arg, thunkAPI) => {\n        setTimeout(() => {\n            setTimeout(() => {\n                thunkAPI.dispatch(clientSlice.actions.changeStage(arg.stage));\n            }, arg.ms);\n        });\n    }\n);\n\ntype SetSnapshotArg = {\n    snapshot: Snapshot;\n    nextStage: AppStage;\n};\n\nexport const setSnapshot = createAsyncThunk<void, SetSnapshotArg>(\n    \"client/set-sbapshot\",\n    ({ snapshot, nextStage }, thunkAPI) => {\n        thunkAPI.dispatch(clientSlice.actions.setSnapshot(snapshot));\n        thunkAPI.dispatch(changeStage({ stage: nextStage, ms: 0 }));\n    }\n);\n","import * as Client from \"modules/client\";\nimport * as Label from \"modules/label\";\nimport { Entity } from \"modules/model/entity\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as React from \"react\";\n\nexport type Prediction = {\n    accuracy: number;\n    label: Label.Entity;\n};\n\nexport const usePredictions = (\n    model?: Entity,\n    snapshot?: Client.Snapshot,\n    labels?: Label.Entity[]\n) => {\n    const [prediction, setPrediction] = React.useState<Prediction[]>([]);\n\n    React.useEffect(() => {\n        const predict = async () => {\n            if (model == null || snapshot == null || labels == null) {\n                return [];\n            }\n    \n            const prediction = await predictImage(snapshot, model);\n    \n            const result = prediction.map<Prediction>((accuracy, index) => ({\n                accuracy,\n                label: labels[index],\n            }));\n\n            setPrediction(\n                result.sort((left, right) => {\n                    return right.accuracy - left.accuracy;\n                })\n            );\n        };\n\n        predict().catch();\n    }, [model, snapshot, setPrediction, labels]);\n\n    return prediction;\n};\n\nconst predictImage = async (\n    target: Blob,\n    model: tf.LayersModel\n): Promise<number[]> => {\n    const image = await blobToImage(target);\n\n    const data = await tf.browser.fromPixelsAsync(image);\n    const preparedData = data\n        .resizeNearestNeighbor([299, 299])\n        .toFloat()\n        .div(255 / 2)\n        .add(-1)\n        .expandDims(0);\n\n    const predict = await model.predict(preparedData);\n    \n    if (Array.isArray(predict)) {\n        const promises = predict.map((item) => item.data());\n\n        const results = await Promise.all(promises);\n        const numbers = results.map((result) => Array.from(result));\n\n        return numbers.reduce((result, current) => [...result, ...current]);\n    }\n\n    return Array.from(await predict.data());\n};\n\nconst blobToImage = (image: Blob) => {\n    const img = document.createElement(\"img\");\n\n    img.src = URL.createObjectURL(image);\n\n    return new Promise<HTMLImageElement>((resolve) => {\n        img.onload = () => {\n            resolve(img);\n        };\n    });\n};\n","export * from \"./entity\";\nexport * from \"./use-predictions\";\n","export const config = {\n    api: {\n        endpoint: process.env.API_ENDPOINT,\n    },\n};\n\nexport const createPath = (path: string) => {\n    return new URL(path, config.api.endpoint).href;\n};\n","import {createPath} from \"shared/config\";\n\n\nexport const endpoints = {\n    model: createPath(\"/model/model.json\"),\n    labels: createPath(\"/labels\"),\n};\n","import axios, { CancelToken } from \"axios\";\nimport * as Label from \"modules/label\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { endpoints } from \"shared\";\n\nclass L2 {\n    static className = \"L2\";\n    \n    constructor(config: any) {\n        return tf.regularizers.l1l2(config);\n    }\n}\n\n// @ts-ignore\ntf.serialization.registerClass(L2);\n\nexport const loaderApi = {\n    model: (onDownloadProgress: (fraction: number) => void) => {\n        return tf.loadLayersModel(endpoints.model, {\n            onProgress: (value) => onDownloadProgress(value * 100),\n        });\n    },\n    labels: async (\n        onDownloadProgress: (fraction: number) => void,\n        cancelToken?: CancelToken\n    ) => {\n        const response = await axios.get<Label.Entity[]>(endpoints.labels, {\n            cancelToken,\n            onDownloadProgress: (event) =>\n                onDownloadProgress((event.loaded * 100) / event.total),\n        });\n\n        return response.data;\n    },\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { AppStage, clientSlice } from \"modules/client\";\nimport { changeStage } from \"modules/client/actions\";\nimport { loaderApi } from \"modules/loader/api\";\nimport { loaderSlice } from \"modules/loader/slice\";\n\ntype LoadDataArg = {\n    entity: \"model\" | \"labels\";\n    nextStage: AppStage;\n};\n\nexport const loadData = createAsyncThunk<void, LoadDataArg>(\n    \"loader/load-model\",\n    async ({ entity, nextStage }, thunkAPI) => {\n        thunkAPI.dispatch(loaderSlice.actions.changeStatus(\"progress\"));\n\n        const onDownloadProgress = (progress: number) => {\n            thunkAPI.dispatch(\n                loaderSlice.actions.setProgress(Math.floor(progress))\n            );\n        };\n\n        try {\n            if (entity === \"model\") {\n                const model = await loaderApi.model(onDownloadProgress);\n\n                thunkAPI.dispatch(clientSlice.actions.setModel(model));\n            }\n\n            if (entity === \"labels\") {\n                const labels = await loaderApi.labels(onDownloadProgress);\n\n                thunkAPI.dispatch(clientSlice.actions.setLabels(labels));\n            }\n\n            thunkAPI.dispatch(loaderSlice.actions.changeStatus(\"default\"));\n            thunkAPI.dispatch(changeStage({ stage: nextStage, ms: 1000 }));\n        } catch (error) {\n            console.error(\"Load data: \", error);\n\n            thunkAPI.dispatch(clientSlice.actions.setError(error));\n            thunkAPI.dispatch(changeStage({ stage: \"error\", ms: 0 }));\n        }\n    }\n);\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const CircleContainer = styled.div``;\n\nexport const Circle = styled.div`\n    width: 100px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nexport const CircleTitle = styled.span`\n    margin-top: 10px;\n`;\n","import { useLoader } from \"modules/loader\";\nimport { Circle, CircleContainer, CircleTitle } from \"pages/loading/styles\";\nimport * as React from \"react\";\nimport { CircularProgressbar } from \"react-circular-progressbar\";\n\nimport \"react-circular-progressbar/dist/styles.css\";\n\nimport { useDispatch } from \"react-redux\";\n\ntype LoaderProps = {\n    title: string;\n    action: Function;\n};\n\nexport const Loader: React.FC<LoaderProps> = ({ action, title }) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        dispatch(action());\n    }, [dispatch, action]);\n\n    const loader = useLoader();\n\n    return (\n        <CircleContainer>\n            <Circle>\n                <CircularProgressbar\n                    value={loader.progress}\n                    text={`${loader.progress}%`}\n                />\n                <CircleTitle>{title}</CircleTitle>\n            </Circle>\n        </CircleContainer>\n    );\n};\n","import { AppStage, PageProps } from \"modules/client\";\nimport { loaderSlice } from \"modules/loader\";\nimport { loadData } from \"modules/loader/actions\";\nimport { Loader } from \"pages/loading/loader\";\nimport { Container } from \"pages/loading/styles\";\nimport { PageWrapper } from \"pages/page-wrapper\";\nimport * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { PickString } from \"shared/types\";\n\nconst Layout: React.FC<PageProps<\"load-labels\" | \"load-model\">> = ({\n    stage,\n}) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        dispatch(loaderSlice.actions.setProgress(0));\n    }, [dispatch, stage]);\n\n    return (\n        <PageWrapper>\n            <Container>\n                <Loader action={actions[stage]} title={titles[stage]} />\n            </Container>\n        </PageWrapper>\n    );\n};\n\nconst actions: {\n    [key in PickString<AppStage, \"load-labels\" | \"load-model\">]: Function;\n} = {\n    \"load-model\": () => loadData({ entity: \"model\", nextStage: \"load-labels\" }),\n    \"load-labels\": () => loadData({ entity: \"labels\", nextStage: \"camera\" }),\n};\n\nconst titles: {\n    [key in PickString<AppStage, \"load-labels\" | \"load-model\">]: string;\n} = {\n    \"load-model\": \"Load model\",\n    \"load-labels\": \"Load labels\",\n};\n\nexport default Layout;\n","import * as React from \"react\";\n\ntype TouchStage = \"start\" | \"move\" | \"default\";\ntype TouchAction = \"start\" | \"move\" | \"end\";\ntype CreateHandler = (action: TouchAction) => (event: React.TouchEvent) => void;\n\nexport const useTouch = (\n    min: number,\n    max: number\n): [CreateHandler, number, TouchStage] => {\n    const [stage, setStage] = React.useState<TouchStage>(\"default\");\n    const [shift, setShift] = React.useState(min);\n\n    const handleTouchStart = React.useCallback(() => {\n        setStage(\"start\");\n    }, [setStage]);\n\n    const handleTouchEnd = React.useCallback(() => {\n        const topDiff = Math.abs(max - shift);\n        const bottomDiff = Math.abs(min - shift);\n\n        if (topDiff < bottomDiff) {\n            setShift(max);\n        }\n\n        if (bottomDiff < topDiff) {\n            setShift(min);\n        }\n\n        setStage(\"default\");\n    }, [shift, setShift, setStage, max, min]);\n\n    const handleTouchMove = React.useCallback(\n        (event: React.TouchEvent) => {\n            setStage(\"move\");\n\n            const touch = event.targetTouches.item(0);\n\n            const shift = max - normalizeNumber(touch.pageY, 0, max - min);\n\n            setShift(shift);\n        },\n        [setStage, setShift, max, min]\n    );\n\n    const createHandler = React.useCallback<CreateHandler>(\n        (action) => {\n            switch (action) {\n                case \"move\":\n                    return handleTouchMove;\n                case \"end\":\n                    return handleTouchEnd;\n                case \"start\":\n                    return handleTouchStart;\n            }\n        },\n        [handleTouchStart, handleTouchMove, handleTouchEnd]\n    );\n\n    return [createHandler, shift, stage];\n};\n\nconst normalizeNumber = (num: number, min: number, max: number) => {\n    if (num < min) {\n        return min;\n    }\n\n    if (num > max) {\n        return max;\n    }\n\n    return num;\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    transition: 0.1s;\n`;\n\ntype HeaderProps = {\n    height: number;\n};\n\nexport const Header = styled.div<HeaderProps>`\n    height: ${({ height }) => height}px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 99999px 99999px 0 0;\n    background-color: white;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n`;\n\nexport const ActiveElement = styled.div`\n    width: 50px;\n    height: 5px;\n    border-radius: 99999px;\n    background-color: silver;\n    cursor: pointer;\n`;\n\ntype ContentProps = {\n    header: number;\n};\n\nexport const Content = styled.div<ContentProps>`\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    height: calc(100% - ${({ header }) => header}px);\n    overflow-y: auto;\n    padding-top: 15px;\n`;\n","import { useTouch } from \"./use-touch\";\nimport * as React from \"react\";\nimport { ActiveElement, Container, Content, Header } from \"./styles\";\n\ntype SwipeContainerProps = {\n    containerHeight: number;\n};\n\nconst HEADER_SIZE = 55;\n\nexport const SwipeContainer: React.FC<SwipeContainerProps> = ({\n    containerHeight,\n    children,\n}) => {\n    const containerRef = React.useRef<HTMLDivElement>(null);\n\n    const [createHandler, shift] = useTouch(355, containerHeight);\n\n    React.useEffect(() => {\n        if (containerRef.current) {\n            containerRef.current.style.top = `calc(100% - ${shift}px)`;\n        }\n    }, [shift, containerRef]);\n\n    return (\n        <Container ref={containerRef}>\n            <Header\n                height={HEADER_SIZE}\n                onTouchStart={createHandler(\"start\")}\n                onTouchEnd={createHandler(\"end\")}\n                onTouchMove={createHandler(\"move\")}\n            >\n                <ActiveElement />\n            </Header>\n            <Content header={HEADER_SIZE}>{children}</Content>\n        </Container>\n    );\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    position: relative;\n`;\n\nexport const BackButton = styled.div`\n    position: absolute;\n    top: 20px;\n    left: 15px;\n    color: white;\n    z-index: 1000;\n    font-size: 30px;\n`;\n\nexport const ImagePreview = styled.img`\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n`;\n\nexport const Prediction = styled.div`\n    display: flex;\n    position: relative;\n`;\n\nexport const PredictionImage = styled.img`\n    width: 40%;\n    height: 100px;\n    object-fit: cover;\n`;\n\nexport const PredictionInfo = styled.div`\n    padding: 0 15px;\n`;\n\nexport const PredictionTitle = styled.div`\n    font-size: 20px;\n`;\n\nexport const PredictionAccuracy = styled.div`\n    color: silver;\n`;\n\nexport const PredictionLine = styled.div``;\n","import { BackIcon } from \"components/icons\";\nimport { SwipeContainer } from \"components/swipe-container\";\nimport * as Client from \"modules/client\";\nimport { changeStage } from \"modules/client/actions\";\nimport * as Model from \"modules/model\";\nimport { PageWrapper } from \"pages/page-wrapper\";\nimport * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n    BackButton,\n    Container,\n    ImagePreview,\n    Prediction,\n    PredictionAccuracy,\n    PredictionImage,\n    PredictionInfo,\n    PredictionLine,\n    PredictionTitle,\n} from \"./styles\";\n\nconst Layout: React.FC = () => {\n    const client = Client.useClient();\n\n    const predictions = Model.usePredictions(\n        client.model,\n        client.snapshot,\n        client.labels\n    );\n\n    const dispatch = useDispatch();\n\n    const handleBack = React.useCallback(() => {\n        dispatch(changeStage({ stage: \"camera\", ms: 0 }));\n    }, [dispatch]);\n\n    if (client.snapshot == null || client.model == null) {\n        return null;\n    }\n\n    return (\n        <PageWrapper>\n            <Container>\n                <BackButton onClick={handleBack}>\n                    <BackIcon />\n                </BackButton>\n\n                <ImagePreview src={URL.createObjectURL(client.snapshot)} />\n\n                <SwipeContainer containerHeight={window.innerHeight}>\n                    <Predictions list={predictions} />\n                </SwipeContainer>\n            </Container>\n        </PageWrapper>\n    );\n};\n\ntype PredictionsProps = {\n    list: Model.Prediction[];\n};\n\nconst Predictions: React.FC<PredictionsProps> = ({ list }) => {\n    return (\n        <>\n            {list.map((item) => (\n                <Prediction key={item.label.title}>\n                    <PredictionImage src={item.label.image} />\n\n                    <PredictionInfo>\n                        <PredictionLine>\n                            <PredictionTitle>\n                                {item.label.title}\n                            </PredictionTitle>\n                        </PredictionLine>\n\n                        <PredictionLine>\n                            <PredictionAccuracy>\n                                Accuracy: {(item.accuracy * 100).toFixed(3)}%\n                            </PredictionAccuracy>\n                        </PredictionLine>\n                    </PredictionInfo>\n                </Prediction>\n            ))}\n        </>\n    );\n};\n\nexport default Layout;\n"],"sourceRoot":""}
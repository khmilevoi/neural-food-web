{"version":3,"sources":["modules/loader/slice.ts","modules/client/index.ts","pages/camera/page.ts","pages/list.ts","pages/loading/page.ts","pages/prediction/page.ts","pages/router.tsx","store.ts","provider.tsx","styles.ts","App.tsx","index.tsx","modules/client/slice.ts"],"names":["loaderSlice","createSlice","name","initialState","status","progress","reducers","changeStatus","state","action","payload","setProgress","loaderSelector","loader","useLoader","useSelector","Page","stage","component","lazy","pages","Camera","Router","client","Client","route","React","find","page","includes","Component","store","configureStore","devTools","reducer","clientSlice","middleware","getDefaultMiddleware","serializableCheck","Provider","getState","children","fallback","Global","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById","setModel","model","setLabels","labels","changeStage","setSnapshot","snapshot","clientSelector","useClient"],"mappings":"yHAAA,sFAgBaA,EAAcC,YAAY,CACnCC,KAAM,SACNC,aAP8B,CAC9BC,OAAQ,UACRC,SAAU,GAMVC,SAAU,CACNC,aAAc,SAACC,EAAOC,GAClBD,EAAMJ,OAASK,EAAOC,SAE1BC,YAAa,SAACH,EAAOC,GACjBD,EAAMH,SAAWI,EAAOC,YAKvBE,EAAwC,SAACJ,GAAD,OAAWA,EAAMK,QAEzDC,EAAY,WACrB,OAAOC,YAAYH,K,gCChCvB,wQ,gGCGaI,EAAoB,CAC7BC,MAAO,SACPC,UAAWC,gBAAK,kBAAM,wDCCbC,EAAuB,CCHH,CAC7BH,MAAO,CAAC,aAAc,eACtBC,UAAWC,gBAAK,kBAAM,+DDGtBE,EEL6B,CAC7BJ,MAAO,aACPC,UAAWC,gBAAK,kBAAM,gE,eCEbG,EAAgC,SAAC,GAAe,IAAD,EAAZF,EAAY,EAAZA,MACtCG,EAASC,cAETC,EAAQC,WAAc,WACxB,OAAON,EAAMO,MACT,SAACC,GAAD,OACIA,EAAKX,QAAUM,EAAON,OAASW,EAAKX,MAAMY,SAASN,EAAON,YAEnE,CAACM,EAAON,MAAOG,IAEZU,EAAS,iBAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAOP,iBAAV,QAAuBQ,WAEtC,OAAO,cAACI,EAAD,CAAWb,MAAOM,EAAON,S,6BCdvBc,EAAQC,YAAe,CAChCC,UAAU,EACVC,QAAS,CACLX,OAAQY,IAAYD,QACpBrB,OAAQb,IAAYkC,SAExBE,WAAYC,YAAqB,CAC7BC,mBAAmB,MCPdC,GDWCR,EAAMS,WCXc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjC,OACI,cAAC,IAAD,CAAeV,MAAOA,EAAtB,SACI,cAAC,WAAD,CAAUW,SAAU,GAApB,SAAyBD,Q,gBCNxBE,EAASC,YAAH,sQCKJ,SAASC,IACpB,OACI,eAAC,EAAD,WACI,cAACF,EAAD,IACA,cAAC,EAAD,CAAQvB,MAAOA,OCN3B0B,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACH,EAAD,MAEJI,SAASC,eAAe,U,+BCT5B,sFAqBaf,EAAclC,YAAY,CACnCC,KAAM,SACNC,aAN8B,CAC9Bc,MAAO,cAMPX,SAAU,CACN6C,SAAU,SAAC3C,EAAOC,GACdD,EAAM4C,MAAQ3C,EAAOC,SAEzB2C,UAAW,SAAC7C,EAAOC,GACfD,EAAM8C,OAAS7C,EAAOC,SAE1B6C,YAAa,SAAC/C,EAAOC,GACjBD,EAAMS,MAAQR,EAAOC,SAEzB8C,YAAa,SAAChD,EAAOC,GACjBD,EAAMiD,SAAWhD,EAAOC,YAKvBgD,EAAwC,SAAClD,GAAD,OAAWA,EAAMe,QAEzDoC,EAAY,WACrB,OAAO5C,YAAY2C,M","file":"static/js/main.95ccfce9.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { useSelector } from \"react-redux\";\nimport { Selector } from \"store\";\n\ninterface LoaderState {\n    status: LoaderStatus;\n    progress: number;\n}\n\ntype LoaderStatus = \"progress\" | \"default\";\n\nconst initialState: LoaderState = {\n    status: \"default\",\n    progress: 0,\n};\n\nexport const loaderSlice = createSlice({\n    name: \"loader\",\n    initialState,\n    reducers: {\n        changeStatus: (state, action: PayloadAction<LoaderStatus>) => {\n            state.status = action.payload;\n        },\n        setProgress: (state, action: PayloadAction<number>) => {\n            state.progress = action.payload;\n        },\n    },\n});\n\nexport const loaderSelector: Selector<LoaderState> = (state) => state.loader;\n\nexport const useLoader = () => {\n    return useSelector(loaderSelector);\n};\n","export * from \"modules/client/types\";\nexport * from \"modules/client/slice\";\n","import { lazy } from \"react\";\nimport * as Client from \"modules/client\";\n\nexport const Page: Client.Page = {\n    stage: \"camera\",\n    component: lazy(() => import(/* webpackChunkName: \"camera\" */ \"./layout\")),\n};\n","import * as Client from \"modules/client\";\n\nimport * as Camera from \"pages/camera\";\nimport * as Loading from \"pages/loading\";\nimport * as Prediction from \"pages/prediction\";\n\nexport const pages: Client.Page[] = [\n    Loading.Page,\n    Camera.Page,\n    Prediction.Page,\n];\n","import { lazy } from \"react\";\nimport * as Client from \"modules/client\";\n\nexport const Page: Client.Page = {\n    stage: [\"load-model\", \"load-labels\"],\n    component: lazy(() => import(/* webpackChunkName: \"loading\" */ \"./layout\")),\n};\n","import { lazy } from \"react\";\nimport * as Client from \"modules/client\";\n\nexport const Page: Client.Page = {\n    stage: \"prediction\",\n    component: lazy(() => import(/* webpackChunkName: \"loading\" */ \"./layout\")),\n};\n","import * as React from \"react\";\nimport * as Client from \"modules/client\";\n\ntype RouterProps = {\n    pages: Client.Page[];\n};\n\nexport const Router: React.FC<RouterProps> = ({ pages }) => {\n    const client = Client.useClient();\n\n    const route = React.useMemo(() => {\n        return pages.find(\n            (page) =>\n                page.stage === client.stage || page.stage.includes(client.stage)\n        );\n    }, [client.stage, pages]);\n\n    const Component = route?.component ?? React.Fragment;\n\n    return <Component stage={client.stage} />;\n};\n","import {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\nimport { Selector as BaseSelector } from \"react-redux\";\nimport { clientSlice } from \"modules/client/slice\";\nimport { loaderSlice } from \"modules/loader/slice\";\n\nexport const store = configureStore({\n    devTools: true,\n    reducer: {\n        client: clientSlice.reducer,\n        loader: loaderSlice.reducer,\n    },\n    middleware: getDefaultMiddleware({\n        serializableCheck: false\n    })\n});\n\nconst State = store.getState();\n\nexport type Selector<Slice> = BaseSelector<typeof State, Slice>;\n","import * as React from \"react\";\nimport { Suspense } from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { store } from \"store\";\n\nexport const Provider: React.FC = ({ children }) => {\n    return (\n        <ReduxProvider store={store}>\n            <Suspense fallback={\"\"}>{children}</Suspense>\n        </ReduxProvider>\n    );\n};\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const Global = createGlobalStyle`\n    body, html, #root {\n      font-family: sans-serif;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n      overscroll-behavior-y: contain;\n    }\n    \n    * {\n      box-sizing: border-box;\n    }\n`;\n","import { pages } from \"pages/list\";\nimport { Router } from \"pages/router\";\nimport { Provider } from \"provider\";\nimport React from \"react\";\nimport { Global } from \"styles\";\n\n// expo find this component\nexport default function App() {\n    return (\n        <Provider>\n            <Global />\n            <Router pages={pages} />\n        </Provider>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { useSelector } from \"react-redux\";\nimport * as Label from \"modules/label\";\nimport * as Model from \"modules/model\";\nimport { Selector } from \"store\";\n\ninterface ClientState {\n    model?: Model.Entity;\n    labels?: Label.Entity[];\n    snapshot?: Snapshot;\n    stage: AppStage;\n}\n\nexport type Snapshot = Blob;\n\nexport type AppStage = \"load-model\" | \"load-labels\" | \"camera\" | \"prediction\";\n\nconst initialState: ClientState = {\n    stage: \"load-model\",\n};\n\nexport const clientSlice = createSlice({\n    name: \"client\",\n    initialState,\n    reducers: {\n        setModel: (state, action: PayloadAction<Model.Entity>) => {\n            state.model = action.payload;\n        },\n        setLabels: (state, action: PayloadAction<Label.Entity[]>) => {\n            state.labels = action.payload;\n        },\n        changeStage: (state, action: PayloadAction<AppStage>) => {\n            state.stage = action.payload;\n        },\n        setSnapshot: (state, action: PayloadAction<Snapshot>) => {\n            state.snapshot = action.payload;\n        },\n    },\n});\n\nexport const clientSelector: Selector<ClientState> = (state) => state.client;\n\nexport const useClient = () => {\n    return useSelector(clientSelector);\n};\n"],"sourceRoot":""}